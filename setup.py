# from distribute_setup import use_setuptools
# use_setuptools()

from pathlib import Path
import sys
import numpy as np
from setuptools import setup
from setuptools.extension import Extension

from Cython.Build import cythonize
ext = ".pyx"

include_dirs = ([np.get_include()] +
                np.__config__.lapack_mkl_info["include_dirs"])
library_dirs = np.__config__.lapack_mkl_info["library_dirs"]
# not all path separators are created equal
include_dirs = [str(Path(directory))
                for directory in include_dirs]
library_dirs = [str(Path(directory))
                for directory in library_dirs]

static_libraries = [
    # "mkl_rt"
    # "mkl_intel_lp64",
    # "mkl_tbb_thread",
    # "mkl_core",
    # "tbb",
]
static_lib_dir = library_dirs[0]
if sys.platform == 'win32':
    # extra_objects = []
    extensions = []
    # include_dirs = [f'"{path}"' for path in include_dirs]
    # library_dirs = [f'"{path}"' for path in library_dirs]
    extra_link_args = []
    # extra_link_args = ["-DMS_WIN64"]
    # extra_compile_args = [r'/DMKL_ILP64 -I"%MKLROOT%"\include']
    # extra_compile_args = [r'-I"%MKLROOT%"\include']
    include_dirs += [r'-I"%MKLROOT%"\include']
else:  # POSIX
    pass
    # extra_compile_args = []
    extra_link_args = []
    # extra_objects = [f'{static_lib_dir}/lib{lib}.so'
    #                  for lib in static_libraries]
    # extra_objects = [f'{static_lib_dir}/lib{lib}.a'
    #                  for lib in static_libraries]

    extensions = [
        Extension(
            "normal_conditional", ["weathercop/normal_conditional" + ext],
            include_dirs=include_dirs,
            library_dirs=library_dirs,
            # extra_objects=extra_objects,
            # libraries=static_libraries,
            # libraries=["mkl_rt", "mkl_intel_lp64"],
            # libraries=["mkl_intel_lp64", "mkl_core", "mkl_tbb_thread",
            #            # "tbb"
            # ],
            # extra_link_args=[
            #     " -I ".join(include_dirs),
            #     # "-L ".join(library_dirs),
            #     # "-lmkl"
            # ],
            # extra_compile_args=extra_compile_args,
        ),
        ]

    # autogenerated functions
    ufuncs_path = Path("./weathercop/ufuncs")
    auto_exts = [
        Extension(
            str(name.stem), [str(name)],
            # include_dirs=[np.get_include()]
            include_dirs=include_dirs + [str(ufuncs_path)],
            extra_link_args=extra_link_args,
            # library_dirs=[str(ufuncs_path)]
            # library_dirs=library_dirs
        )
        for name in ufuncs_path.glob("*.pyx")]
    # build_ext --inplace misses subdirs?
    for name in ufuncs_path.glob("*.pyx"):
        Path(name.absolute().parent / name.stem).mkdir(exist_ok=True)
    extensions += auto_exts

extensions += [
    Extension("cvine", ["weathercop/cvine" + ext],
              include_dirs=include_dirs,
              library_dirs=library_dirs)]

setup(
    name="weathercop",
    version="0.1",
    # packages=["weathercop"],
    packages=["weathercop",
              "weathercop.ufuncs"],
    ext_modules=cythonize(extensions),
    install_requires=[
        'numpy',
        'scipy',
        'matplotlib',
        'sympy',
        'cartopy',
        'networkx',
        'tqdm',
        'timezonefinder',
        'mkl',
        'numexpr',
        'cython',
        'pandas',
        'xarray',
        'dill',
        ],

    package_data={
        # If any package contains *.txt or *.rst files, include them:
        # '': ['*.txt', '*.dat', '*.met', "*.rst", "*.pyx", "*.c"],
        '': ["*.pyx", "*.c", "*.h", "*.pyd", "*.so", "sympy_cache.*"],
        # 'doc': ['*.html', '*.rst'],
        },

    include_package_data=True,

    # metadata for upload to PyPI
    author="Dirk Schlabing",
    author_email="dirk.schlabing@iws.uni-stuttgart.de",
    description="A Copula-based Weather Generator",
    license="BSD",
    keywords=("weather generator copula phase randomization"),
    # # could also include long_description, download_url, classifiers, etc.
    # long_description=\
    #     """asdf"""
)
